#### Title : MediaLive Multi-Channel Controller - Variation 377
#### Author : Scott Cunningham
#### 
####
## Parameters - User Input
Parameters:
  S3PolicyForMediaAccess:
    Description: Policy that gives Lambda access to customer managed S3 Bucket
    Type: String
    AllowedPattern: ^arn:aws:iam::.+ #(\d{12}|aws):policy/:+
    Default: arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

  HMTL5CompositionEndpoint:
    Description: URL Provided to you that relates to your HTML5 graphics endpoint
    Type: String
    Default: https://replaceme.please

  HMTL5CtrlEndpoint:
    Description: API Key for the HTML5 endpoint
    Type: String

## Resources
Resources:
  #################
  ## S3
  #################

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName

  #
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument: !Sub
        |-
        {
            "Version": "2012-10-17",
            "Id": "PolicyForCloudFrontPrivateContent",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "AWS": "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOAI}"
                    },
                    "Action": "s3:GetObject",
                    "Resource": "arn:aws:s3:::${S3Bucket}/*"
                }
            ]
        }
    DependsOn:
      - S3Bucket
      - CloudFrontOAI


  #################
  ## IAM & Permissions
  #################
  ## IAM Role
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Sub ${S3PolicyForMediaAccess}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName

  ## IAM Policy
  S3AccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref LambdaRole
      PolicyName: !Sub ${AWS::StackName}-s3-access
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:*
            Resource:
              - !Sub arn:aws:s3:::${S3Bucket}/*
          - Effect: Allow
            Action:
              - s3:*
            Resource:
              - !Sub arn:aws:s3:::${S3Bucket}
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource:
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
          - Effect: Allow
            Action:
              - medialive:*
            Resource:
                - '*'
    DependsOn: S3Bucket

  IAMRoleForMediaLive:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-MediaLiveAccessRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSElementalMediaPackageFullAccess
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - medialive.amazonaws.com
            Action:
              - sts:AssumeRole

  MediaLiveAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref IAMRoleForMediaLive
      PolicyName: !Sub ${AWS::StackName}-MediaLiveAccessPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:*
            Resource:
              - !Sub arn:aws:s3:::${S3Bucket}/*
          - Effect: Allow
            Action:
              - s3:*
            Resource:
              - !Sub arn:aws:s3:::${S3Bucket}
          - Effect: Allow
            Action:
              - mediaconnect:ManagedDescribeFlow
              - mediaconnect:ManagedAddOutput
              - mediaconnect:ManagedRemoveOutput
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - medialive:*
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - mediaconnect:*
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - ec2:describeSubnets
              - ec2:describeNetworkInterfaces
              - ec2:createNetworkInterface
              - ec2:createNetworkInterfacePermission
              - ec2:deleteNetworkInterface
              - ec2:deleteNetworkInterfacePermission
              - ec2:describeSecurityGroups
              - ec2:describeAddresses
              - ec2:associateAddress
              - ec2:describeSubnets
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:role/*

  LambdaInvokePermissionAPIGateway:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt MediaLiveControlFunctions.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/dashboard-ctrl"
    DependsOn:
      - MediaLiveControlFunctions

  LambdaInvokePermissionAPIHandlerAPIGateway:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt MediaLiveControlConfig.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/dashboard-cfg/*"
    DependsOn:
      - MediaLiveControlConfig

  #################
  ## Custom Resource
  #################

  FileMover:
    Type: Custom::LambdaInvokerToMoveFiles
    Properties:
      ServiceToken: !GetAtt FileCopier.Arn
      Region: !Ref 'AWS::Region'
    DependsOn:
      - S3Bucket
      - LambdaRole

  ChannelMapUpdater:
    Type: Custom::LambdaInvokerToUpdateConfig
    Properties:
      ServiceToken: !GetAtt ChannelMapUpdaterFunction.Arn
      Region: !Ref 'AWS::Region'
      Bucket: !Ref S3Bucket
      Config_Key: !GetAtt FileMover.channel_map
      Api_Ctrl: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${ApiStage}/dashboard-ctrl
      HTML5_URL: !Ref HMTL5CompositionEndpoint
      HTML5_KEY: !Ref HMTL5CtrlEndpoint

    DependsOn:
      - CloudFrontDistribution
      - ApiGateway

  #################
  ## Lambda
  #################
  MediaLiveControlFunctions:
    Type: AWS::Lambda::Function
    Properties:
      #FunctionName: !Sub ${DeploymentName}-medialive-html5-api-handler
      Description: MediaLive Boto3 Control actions
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Handler: index.lambda_handler
      Timeout: 10
      MemorySize: 10240
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !GetAtt FileMover.medialive-control-functions
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
    DependsOn:
      - S3Bucket
      - LambdaRole
      - FileCopier
      - FileMover

  MediaLiveControlConfig:
    Type: AWS::Lambda::Function
    Properties:
      #FunctionName: !Sub ${DeploymentName}-medialive-html5-api-handler
      Description: Channel configuration API handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Handler: index.lambda_handler
      Timeout: 10
      MemorySize: 10240
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !GetAtt FileMover.medialive-control-config
      Environment:
        Variables:
          BUCKET: !Ref S3Bucket
          CONFIG_KEY: !GetAtt FileMover.channel_map
          TEMPLATE_KEY: !GetAtt FileMover.channel_map_template
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
    DependsOn:
      - S3Bucket
      - LambdaRole
      - FileCopier
      - FileMover

  FileCopier:
    Type: AWS::Lambda::Function
    Properties:
      #FunctionName: !Sub ${DeploymentName}-medialive-html5-api-handler
      Description: Lambda function to copy solution files to destination bucket
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Handler: index.lambda_handler
      Timeout: 30
      MemorySize: 10240
      Code:
        ZipFile: |
          '''
          Copyright (c) 2021 Scott Cunningham

          Permission is hereby granted, free of charge, to any person obtaining a copy
          of this software and associated documentation files (the "Software"), to deal
          in the Software without restriction, including without limitation the rights
          to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
          copies of the Software, and to permit persons to whom the Software is
          furnished to do so, subject to the following conditions:

          The above copyright notice and this permission notice shall be included in all
          copies or substantial portions of the Software.

          THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
          IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
          FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
          AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
          LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
          OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
          SOFTWARE.

          Summary: This script is a custom resource to place the HTML pages and Lambda code into the destination bucket.

          Original Author: Scott Cunningham
          '''

          import json
          import logging
          import boto3
          import os
          import urllib3
          from urllib.parse import urlparse
          from zipfile import ZipFile
          import cfnresponse

          LOGGER = logging.getLogger()
          LOGGER.setLevel(logging.INFO)
          MANIFESTMODIFY="True"

          def lambda_handler(event, context):

              ## Log the incoming event
              LOGGER.info("Event : %s " % (event))

              ## Create Response Data Dictionary for the CloudFormationn response
              responseData = dict()

              ## Initialize S3 boto3 client
              s3 = boto3.client('s3')

              # Create urllib3 pool manager
              http = urllib3.PoolManager()

              # environment variables
              bucket = os.environ['BUCKET']
              apiendpoint = os.environ['APIENDPOINT']

              # Manifest File containning URL's on github
              cloudformation_manifest = "https://raw.githubusercontent.com/scunning1987/medialive_single_channel_controller/main/manifest.txt"

              # Get the manifest from GitHub
              get_response = http.request('GET', cloudformation_manifest)

              if get_response.status != 200:
                  # Exit the script with errors
                  responseData['Status'] = "Unable to get file from location : %s " % (file)
                  cfnresponse.send(event, context, "FAILED",responseData)
                  raise Exception("Unable to get file from location : %s " % (file))
              else:
                  # Continue and upload to S3
                  manifest_list = get_response.data.decode("utf-8").split("\n")

              # remove manifest.txt header line
              manifest_list.pop(0)

              LOGGER.info("Files to transfer to S3: %s " % (manifest_list))

              for file in manifest_list:

                  # Get the file from GitHub
                  if "http" in file:
                      get_response = http.request('GET', file)

                  if get_response.status != 200:
                      # Exit the script with errors
                      responseData['Status'] = "Unable to get file from location : %s " % (file)
                      cfnresponse.send(event, context, "FAILED",responseData)
                      raise Exception("Unable to get file from location : %s " % (file))
                  elif "http" in file:

                      # Continue and upload to S3

                      # url string to urllib object
                      file_url_formatted = urlparse(file)
                      file_url_path = file_url_formatted.path

                      # get path after github repo owner name - use this as the path to write to s3
                      path = '/'.join(file_url_path.split("/")[2:]).rsplit("/",1)[0]
                      s3_data = get_response.data


                      file_name = file.rsplit("/",1)[1]
                      file_base_name = os.path.splitext(file_name)[0]
                      s3_key = "%s/%s" % (path,file_name)

                      content_type = ""
                      if ".html" in file_name:
                          content_type = "text/html"
                      elif ".css" in file_name:
                          content_type = "text/css"
                      elif ".js" in file_name:
                          content_type = "text/javascript"
                      elif ".json" in file_name:
                          content_type = "application/json"
                      elif ".zip" in file_name: # this is the zip
                          content_type = "application/zip"
                          s3_key = path + file_name
                      elif ".py" in file_name:
                          # write python file to zip,
                          python_file = open("/tmp/"+file_name,"w")
                          python_file.write(get_response.data.decode("utf-8"))
                          python_file.close()

                          # Zip the file
                          LOGGER.info("Zipping the file : %s " % ("/tmp/"+file_name))
                          zipObj = ZipFile('/tmp/'+file_name.replace(".py",".zip"), 'w')
                          # Add file to the zip
                          zipObj.write('/tmp/'+file_name,"index.py")
                          # close the Zip File
                          zipObj.close()
                          LOGGER.info("Finished zipping file")

                          content_type = "application/zip"
                          s3_data = open("/tmp/"+file_name.replace(".py",".zip"), 'rb')
                          s3_key = s3_key.replace(".py",".zip")

                      # "RequestType": "Create"
                      if event['RequestType'] == "Create" or event['RequestType'] == "Update":
                          # Upload to S3
                          LOGGER.info("Now uploading %s to S3, Bucket: %s , path: %s" % (file_name,bucket,s3_key))
                          try:
                              s3_response = s3.put_object(Body=s3_data, Bucket=bucket, Key=s3_key,ContentType=content_type, CacheControl='no-cache')
                              LOGGER.info("Uploaded %s to S3, got response : %s " % (file_name,s3_response) )
                              responseData[file_base_name] = s3_key
                          except Exception as e:
                              LOGGER.error("Unable to upload %s to S3, got exception: %s" % (file_name,e))
                              responseData['Status'] = "Unable to upload %s to S3, got exception: %s" % (file_name,e)
                              cfnresponse.send(event, context, "FAILED",responseData)
                              raise Exception("Unable to upload %s to S3, got exception: %s" % (file_name,e))

                      else: # DELETE
                          try:
                              s3_response = s3.delete_object(Bucket=bucket,Key=s3_key)
                              LOGGER.info("Deleted %s from S3, got response : %s " % (file_name,s3_response) )
                          except Exception as e:
                              LOGGER.error("Unable to delete %s from S3, got exception: %s" % (file_name,e))
                              responseData['Status'] = "Unable to delete %s from S3, got exception: %s" % (file_name,e)
                              cfnresponse.send(event, context, "FAILED",responseData)
                  else:
                      LOGGER.info("Got line in manifest.txt that isn't a URL: %s " % (file))
              responseData['Status'] = "SUCCESS"
              cfnresponse.send(event, context, "SUCCESS",responseData)
              return responseData

      Environment:
        Variables:
          BUCKET: !Ref S3Bucket
          APIENDPOINT: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/v1/dashboard-ctrl
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
    DependsOn:
      - S3Bucket
      - LambdaRole
      - S3AccessPolicy

  ChannelMapUpdaterFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Channel configuration API handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Handler: index.lambda_handler
      Timeout: 10
      MemorySize: 10240
      Code:
        ZipFile: |
          '''
          Copyright (c) 2021 Scott Cunningham

          Permission is hereby granted, free of charge, to any person obtaining a copy
          of this software and associated documentation files (the "Software"), to deal
          in the Software without restriction, including without limitation the rights
          to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
          copies of the Software, and to permit persons to whom the Software is
          furnished to do so, subject to the following conditions:

          The above copyright notice and this permission notice shall be included in all
          copies or substantial portions of the Software.

          THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
          IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
          FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
          AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
          LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
          OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
          SOFTWARE.

          Summary: This script is a custom resource to place the HTML pages and Lambda code into the destination bucket.

          Original Author: Scott Cunningham
          '''

          import json
          import logging
          import boto3
          import os
          import urllib3
          from urllib.parse import urlparse
          from zipfile import ZipFile
          import cfnresponse

          LOGGER = logging.getLogger()
          LOGGER.setLevel(logging.INFO)
          MANIFESTMODIFY="True"

          def lambda_handler(event, context):

              ## Log the incoming event
              LOGGER.info("Event : %s " % (event))

              ## Create Response Data Dictionary for the CloudFormationn response
              responseData = dict()

              ## Initialize S3 boto3 client
              s3 = boto3.client('s3')

              # environment variables
              bucket = os.environ['BUCKET']
              s3_key = os.environ['CONFIG_KEY']
              api_ctrl = os.environ['APICTRL']
              eml_channel = os.environ['EML_CHANNEL']
              eml_ch_name = os.environ['EML_CHANNEL_NAME']
              html5_ctrl = os.environ['HTML5_CTRL']
              html5_gfx = os.environ['HTML5_GFX']
              hls_url = os.environ['HLS_URL']


              LOGGER.info("Environment Variable : S3 Bucket : %s " % (bucket))
              LOGGER.info("Environment Variable : S3 Key : %s " % (s3_key))
              LOGGER.info("Environment Variable : API Ctrl : %s " % (api_ctrl))
              LOGGER.info("Environment Variable : EML Channel is : %s " % (eml_channel))

              # "RequestType": "Create"
              if event['RequestType'] == "Create" or event['RequestType'] == "Update":
                  # Get Channel Map JSON from S3
                  LOGGER.info("Now getting Channel map json from S3")
                  try:
                      s3_response = s3.get_object(Bucket=bucket, Key=s3_key)
                      LOGGER.info("Got object from S3")
                  except Exception as e:
                      LOGGER.error("Unable to get object from S3, got exception: %s" % (e))
                      responseData['Status'] = "Unable to get object from S3, got exception: %s" % (e)
                      return cfnresponse.send(event, context, "FAILED",responseData)
                      raise Exception("Unable to get object from S3, got exception: %s" % (e))

                  # print s3 response
                  LOGGER.info("s3 object: %s " % (s3_response))

                  # Edit json with deployment information
                  s3_data = json.loads(s3_response['Body'].read())
                  s3_data['control_api_endpoint_url'] = api_ctrl
                  s3_data['channel_map']['1']['primary_channel_id'] = eml_channel
                  s3_data['channel_map']['1']['proxy_gen_channel'] = eml_channel
                  s3_data['channel_map']['1']['channel_friendly_name'] = eml_ch_name
                  s3_data['channel_map']['1']['html5_graphics_url'] = html5_gfx
                  s3_data['channel_map']['1']['html5_graphics_ctrl'] = html5_ctrl
                  s3_data['channel_map']['1']['hls_url'] = hls_url

                  content_type = "application/json"

                  # Put S3 Object back to bucket with changes
                  LOGGER.info("Now putting Channel map json back to S3")
                  try:
                      s3_response = s3.put_object(Body=json.dumps(s3_data), Bucket=bucket, Key=s3_key,ContentType=content_type, CacheControl='no-cache')
                      LOGGER.info("Put object to S3")
                      responseData['copy'] = s3_key
                  except Exception as e:
                      LOGGER.error("Unable to get object from S3, got exception: %s" % (e))
                      responseData['Status'] = "Unable to get object from S3, got exception: %s" % (e)
                      return cfnresponse.send(event, context, "FAILED",responseData)
                      raise Exception("Unable to get object from S3, got exception: %s" % (e))

              else: # DELETE
                  LOGGER.info("Nothing to do when DELETE stack command is used")


              responseData['Status'] = "SUCCESS"
              cfnresponse.send(event, context, "SUCCESS",responseData)
              return responseData

      Environment:
        Variables:
          BUCKET: !Ref S3Bucket
          CONFIG_KEY: !GetAtt FileMover.channel_map
          EML_CHANNEL: !Ref MediaLiveChannelDistribution
          APICTRL: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${ApiStage}/dashboard-ctrl
          EML_CHANNEL_NAME: !Ref MediaLiveChannelDistribution
          HTML5_CTRL: !Ref HMTL5CtrlEndpoint
          HTML5_GFX: !Ref HMTL5CompositionEndpoint
          HLS_URL: !GetAtt MediaPackageOriginEndpoint.Url

      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
    DependsOn:
      - CloudFrontDistribution
      - ApiGateway
      - MediaLiveChannelDistribution
      - MediaPackageChannel



    #################
    ## API Gateway
    #################
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${AWS::StackName}-emlctrl-api-handler
      Description: !Sub API Handler [${AWS::StackName}]
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName

  ProxyPlusResourceCtrl:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'dashboard-ctrl'
      RestApiId: !Ref ApiGateway
    DependsOn:
      - ApiGateway

  ProxyPlusResourceCfgRoot:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'dashboard-cfg'
      RestApiId: !Ref ApiGateway
    DependsOn:
      - ApiGateway

  ProxyPlusResourceCfgProxy:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ProxyPlusResourceCfgRoot
      PathPart: '{proxy+}'
      RestApiId: !Ref ApiGateway
    DependsOn:
      - ApiGateway

  AnyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        #Credentials: !GetAtt ApiGatewayRole.Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: '200'
        Type: AWS_PROXY
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - :lambda:path/2015-03-31/functions/
            - !GetAtt MediaLiveControlConfig.Arn
            - /invocations
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: !Ref EmptyApiModel
      ResourceId: !Ref ProxyPlusResourceCfgProxy
      RestApiId: !Ref ApiGateway
    DependsOn:
      - ApiGateway

  GetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        #Credentials: !GetAtt ApiGatewayRole.Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: '200'
        Type: AWS_PROXY
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - :lambda:path/2015-03-31/functions/
            - !GetAtt MediaLiveControlFunctions.Arn
            - /invocations
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: !Ref EmptyApiModel
      ResourceId: !Ref ProxyPlusResourceCtrl
      RestApiId: !Ref ApiGateway
    DependsOn:
      - ApiGateway

  PutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: PUT
      Integration:
        #Credentials: !GetAtt ApiGatewayRole.Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: '200'
        Type: AWS_PROXY
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - :lambda:path/2015-03-31/functions/
            - !GetAtt MediaLiveControlFunctions.Arn
            - /invocations
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: !Ref EmptyApiModel
      ResourceId: !Ref ProxyPlusResourceCtrl
      RestApiId: !Ref ApiGateway
    DependsOn:
      - ApiGateway

  OptionsForCors:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: true
      ResourceId: !Ref ProxyPlusResourceCtrl
      RestApiId: !Ref ApiGateway
    DependsOn:
      - ApiGateway

  EmptyApiModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      Description: This is a default empty schema model
      RestApiId: !Ref ApiGateway
      Schema: {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "Empty Schema",
        "type": "object"
      }

  Deployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: Production Deployment of Api Endpoint
      RestApiId: !Ref ApiGateway
    DependsOn:
      - AnyMethod
      - GetMethod
      - PutMethod
      - ApiGateway

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref Deployment
      RestApiId: !Ref ApiGateway
      StageName: v1
    DependsOn:
      - ApiGateway

    #################
    ## MediaPackage
    #################

  MediaPackageChannel:
    Type: AWS::MediaPackage::Channel
    Properties:
      Description: MediaPackage Channel for MediaLive stream
      Id: !Sub EMP_${AWS::StackName}

  MediaPackageOriginEndpoint:
    Type: AWS::MediaPackage::OriginEndpoint
    Properties:
      ChannelId: !Sub EMP_${AWS::StackName}
      Id: !Sub hls_${AWS::StackName}
      ManifestName: index
      HlsPackage:
        AdMarkers: SCTE35_ENHANCED
        PlaylistWindowSeconds: 30
        SegmentDurationSeconds: 2
    DependsOn:
      - MediaPackageChannel

    #################
    ## MediaLive
    #################

  ML1HLS:
    Type: AWS::MediaLive::Input
    Properties:
      Name: !Sub hls_${AWS::StackName}
      #RoleArn: !Ref IAMRoleForMediaLive
      Type: URL_PULL
      Sources:
        - Url: https://af93123e0d76e324607b5414578c69b2.p05sqb.channel-assembly.mediatailor.us-west-2.amazonaws.com/v1/channel/cunsco-1/hls.m3u8

  ML1MP4L:
    Type: AWS::MediaLive::Input
    Properties:
      Name: !Sub mp4l_${AWS::StackName}
      #RoleArn: !Ref IAMRoleForMediaLive
      Type: MP4_FILE
      Sources:
        - Url: s3://$urlPath$

  ML1MP4C:
    Type: AWS::MediaLive::Input
    Properties:
      Name: !Sub mp4c_${AWS::StackName}
      #RoleArn: !Ref IAMRoleForMediaLive
      Type: MP4_FILE
      Sources:
        - Url: s3://$urlPath$

  MediaLiveChannelDistribution:
    Type: 'AWS::MediaLive::Channel'
    Properties:
      Name: !Sub ${AWS::StackName}
      ChannelClass: SINGLE_PIPELINE
      InputSpecification:
        Codec: AVC
        MaximumBitrate: MAX_10_MBPS
        Resolution: HD
      LogLevel: DISABLED
      RoleArn: !GetAtt IAMRoleForMediaLive.Arn
      InputAttachments:
        - InputId: !Ref ML1HLS
          InputAttachmentName: MainStream
          InputSettings:
            SourceEndBehavior: CONTINUE
            NetworkInputSettings:
              HlsInputSettings:
                BufferSegments: 3
                Scte35Source: MANIFEST
        - InputId: !Ref ML1MP4L
          InputAttachmentName: LoopMP4
          InputSettings:
            SourceEndBehavior: LOOP
        - InputId: !Ref ML1MP4C
          InputAttachmentName: ContinueMP4
          InputSettings:
            SourceEndBehavior: CONTINUE
      Destinations:
        - Id: emp1
          MediaPackageSettings:
            - ChannelId: !Sub EMP_${AWS::StackName}
      EncoderSettings:
        FeatureActivations:
          InputPrepareScheduleActions: ENABLED
        AudioDescriptions:
          - Name: audio_0
            AudioTypeControl: FOLLOW_INPUT
            LanguageCodeControl: FOLLOW_INPUT
            CodecSettings:
              AacSettings:
                CodingMode: CODING_MODE_2_0
                Profile: LC
                Bitrate: 128000
                SampleRate: 48000
        VideoDescriptions:
          - CodecSettings:
              H264Settings:
                AfdSignaling: NONE
                ColorMetadata: IGNORE
                AdaptiveQuantization: HIGH
                Bitrate: 20000000
                EntropyEncoding: CABAC
                FlickerAq: ENABLED
                ForceFieldPictures: DISABLED
                FramerateControl: SPECIFIED
                FramerateDenominator: 1001
                FramerateNumerator: 30000
                GopBReference: DISABLED
                GopClosedCadence: 1
                GopSize: 1
                GopSizeUnits: SECONDS
                SubgopLength: FIXED
                ScanType: INTERLACED
                Level: H264_LEVEL_AUTO
                LookAheadRateControl: MEDIUM
                NumRefFrames: 1
                ParControl: SPECIFIED
                ParNumerator: 1
                ParDenominator: 1
                Profile: HIGH
                RateControlMode: CBR
                Syntax: DEFAULT
                SceneChangeDetect: ENABLED
                SpatialAq: ENABLED
                TemporalAq: ENABLED
                TimecodeInsertion: PIC_TIMING_SEI
                QualityLevel: ENHANCED_QUALITY
                FilterSettings:
                  TemporalFilterSettings:
                    PostFilterSharpening: AUTO
                    Strength: AUTO
            Name: high
            Width: 1280
            Height: 720
            RespondToAfd: NONE
            Sharpness: 50
            ScalingBehavior: DEFAULT
          - CodecSettings:
              H264Settings:
                AfdSignaling: NONE
                ColorMetadata: IGNORE
                AdaptiveQuantization: LOW
                Bitrate: 250000
                EntropyEncoding: CABAC
                FlickerAq: ENABLED
                ForceFieldPictures: DISABLED
                FramerateControl: SPECIFIED
                FramerateDenominator: 1001
                FramerateNumerator: 30000
                GopBReference: DISABLED
                GopClosedCadence: 1
                GopSize: 1
                GopSizeUnits: SECONDS
                SubgopLength: FIXED
                ScanType: PROGRESSIVE
                Level: H264_LEVEL_AUTO
                LookAheadRateControl: LOW
                NumRefFrames: 1
                ParControl: SPECIFIED
                ParNumerator: 1
                ParDenominator: 1
                Profile: MAIN
                RateControlMode: CBR
                Syntax: DEFAULT
                SceneChangeDetect: ENABLED
                SpatialAq: ENABLED
                TemporalAq: ENABLED
                TimecodeInsertion: DISABLED
                QualityLevel: STANDARD_QUALITY
            Height: 360
            Name: low
            RespondToAfd: NONE
            Sharpness: 50
            ScalingBehavior: DEFAULT
            Width: 640
        CaptionDescriptions: []
        OutputGroups:
          - Name: MediaPackageOutput
            OutputGroupSettings:
              MediaPackageGroupSettings:
                Destination:
                  DestinationRefId: emp1
            Outputs:
              - OutputName: high
                VideoDescriptionName: high
                AudioDescriptionNames:
                  - audio_0
                CaptionDescriptionNames: []
                OutputSettings:
                  MediaPackageOutputSettings: {}
              - OutputName: low
                VideoDescriptionName: low
                AudioDescriptionNames:
                  - audio_0
                CaptionDescriptionNames: [ ]
                OutputSettings:
                  MediaPackageOutputSettings: {}

        TimecodeConfig:
          Source: EMBEDDED
      Tags:
        Bumpers: Bumpers
    DependsOn:
      - MediaPackageChannel

    #################
    ## CloudFront
    #################

  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub CloudFront OAI for Bucket ${S3Bucket}

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub Distribution for stack ${AWS::StackName}
        Enabled: True
        HttpVersion: http2
        Origins:
          - DomainName: !Sub ${S3Bucket}.s3.${AWS::Region}.amazonaws.com
            Id: !Ref S3Bucket
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOAI}
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          TargetOriginId: !Ref S3Bucket
          ViewerProtocolPolicy: redirect-to-https
          DefaultTTL: 2
          MinTTL: 2
          MaxTTL: 2
          ForwardedValues:
            QueryString: True
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
    DependsOn:
      - CloudFrontOAI
      - MediaPackageChannel

#################################
# Outputs
#################################

Outputs:
  DashboardUrl:
    Description: Dashboard URL for MediaLive control
    #Value: !Sub https://${S3Bucket}.s3.${AWS::Region}.amazonaws.com/${FileMover.ui}
    Value: !Sub https://${CloudFrontDistribution.DomainName}/${FileMover.demo}


  APIEndpointURLGetSample:
    Description: API Endpoint for getting sample configuration, method - GET
    #Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${ApiStage}/${ProxyPlusResourceCfgRoot.PathPart}/template
    Value: !Join
      - ''
      - - 'https://'
        - !Ref ApiGateway
        - '.execute-api.'
        - !Ref 'AWS::Region'
        - '.amazonaws.com/'
        - !Ref ApiStage
        - '/dashboard-cfg/template'

  APIEndpointURLGetConfig:
    Description: API Endpoint for getting existing configuration, method - GET
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${ApiStage}/dashboard-cfg/existing

  APIEndpointURLPutConfig:
    Description: API Endpoint for updating existing configuration, method - PUT
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${ApiStage}/dashboard-cfg/update

  EMPEndpoint:
    Value: !GetAtt MediaPackageOriginEndpoint.Url

  #APIEndpointURLCTRL:
  #  Description: API Endpoint to control the MediaLive channels. This URL is needed when updating the config
  #  Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${ApiStage}/dashboard-ctrl

